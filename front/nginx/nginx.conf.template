worker_processes 1;


events {
    worker_connections 1024;
}

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    server {
        listen      443 ssl;
        listen	[::]:443 ssl;
        server_name ${SERV_IP};
        ssl_certificate     /etc/ssl/serv.crt;
        ssl_certificate_key /etc/ssl/serv.key;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_session_timeout 10m;
        keepalive_timeout 70;

        root /usr/share/nginx/html;
        index index.html index.htm;
        include /etc/nginx/mime.types;


        gzip on;
        gzip_http_version 1.1;
        gzip_disable      "MSIE [1-6]\.";
        gzip_min_length   256;
        gzip_vary         on;
        gzip_proxied      expired no-cache no-store private auth;
        gzip_types        text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
        gzip_comp_level   9;

        location / {
            try_files $uri $uri/ /index.html;
        }

        location /wss/ {
            proxy_pass https://${SERV_IP}/back_game:443;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_redirect off;
            proxy_intercept_errors on;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            error_page 502 503 504 =200 @pong_error;
        }

        location @pong_error {
            # You can specify a URI to serve an error message or JSON response
            # For example, a static JSON error message:
            # return 200 '{"error":"Service unavailable"}';
            # Or redirect to a specific error handling page:
            # try_files /service-unavailable.html =404;
            # This example returns a simple 503 Service Unavailable status code:
            return 503;
        }
    }
}
