services:
    db:
        image: postgres:latest
        container_name: db
        volumes:
            - db-data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        networks:
            - transcendence
        restart: unless-stopped
        env_file: .env
        healthcheck:
            test: "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
            interval: 5s
            timeout: 1s
            retries: 20
            start_period: 5s

    back_auth:
        image: back
        container_name: back_auth
        build:
            context: back
        depends_on:
            db:
                condition: service_healthy
        ports:
            - "8000:443"
        networks:
            - transcendence
        restart: unless-stopped
        env_file: .env

    back_user:
        image: back
        container_name: back_user
        build:
            context: back
        depends_on:
            back_auth:
                condition: service_healthy
        ports:
            - "8002:443"
        networks:
            transcendence:
                aliases:
                    - back-user
        restart: unless-stopped
        env_file: .env

    back_aipi:
        image: back
        container_name: back_aipi
        build:
            context: back
        env_file: .env
        depends_on:
            back_game:
                condition: service_healthy
        ports:
            - "8003:443"
        networks:
            transcendence:
                aliases:
                    - back-aipi
        restart: unless-stopped

    back_game:
        image: back
        container_name: back_game
        build:
            context: back
        env_file: .env
        depends_on:
            redis:
                condition: service_healthy
            back_user:
                condition: service_healthy
        ports:
            - "8001:443"
        networks:
            transcendence:
                aliases:
                    - back-game
        restart: unless-stopped

    front:
        image: front
        container_name: front
        build:
            context: front
        depends_on:
            back_game:
                condition: service_healthy
        volumes:
            - front-data:/usr/share/nginx/html
        ports:
            - "4200:443"
        networks:
            - transcendence
        restart: unless-stopped

    redis:
        image: "redis:latest"
        container_name: redis
        ports:
            - "6380:6379"
        healthcheck:
            test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
            interval: 5s
            timeout: 1s
            retries: 10
            start_period: 5s
        networks:
            - transcendence

    prometheus:
        image: prom/prometheus:v2.35.0
        container_name: prometheus
        user: root
        deploy:
            replicas: 1
        volumes:
            - prometheus-data:/prometheus
            - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - ./monitoring/alertmanager/alert.rules/alerts.rules.yml:/alertmanager/alert.rules/alerts.rules.yml
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--storage.tsdb.retention.time=365d'
        ports:
            - "9090:9090"
        depends_on:
            alertmanager:
                condition: service_healthy
            blackbox:
                condition: service_healthy
            node_exporter:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090"]
            interval: 5s
            timeout: 1s
            retries: 10
            start_period: 5s
        networks:
            - transcendence

    grafana:
        image: grafana/grafana:9.3.6
        container_name: grafana
        environment:
            - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
            - DS_PROMETHEUS=prometheus
        user: root
        deploy:
            replicas: 1
        depends_on:
            prometheus:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
            interval: 5s
            timeout: 1s
            retries: 10
            start_period: 5s
        volumes:
            - grafana-data:/var/lib/grafana
            - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
            - ./monitoring/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
            - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
            - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
        ports:
            - "3000:3000"
        networks:
            - transcendence

    cadvisor:
        image: gcr.io/cadvisor/cadvisor:latest
        container_name: cadvisor
        # command: --logtostderr --v=4
        user: root
        group_add:
            - 131
        restart: unless-stopped
        privileged: true
        healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
            interval: 5s
            timeout: 1s
            retries: 10
            start_period: 5s
        volumes:
            - /run/user/1000:/var/run:ro
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
            - /etc/machine-id:/etc/machine-id:ro
            - /:/rootfs:ro
            - /dev/disk/:/dev/disk:ro
        devices:
            - /dev/kmsg:/dev/kmsg
        cap_add:
            - SYSLOG
            - SYS_ADMIN
        security_opt:
            - seccomp:unconfined 
        ports:
            - "8080:8080"
        networks:
            - transcendence

    alertmanager:
        image: prom/alertmanager
        container_name: alertmanager
        healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093"]
            interval: 5s
            timeout: 1s
            retries: 10
            start_period: 5s
        user: root
        volumes:
            - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
            - ./monitoring/alertmanager/templates/default.tmpl:/etc/alertmanager/templates/default.tmpl
        command:
            - '--config.file=/etc/alertmanager/alertmanager.yml'
        ports:
            - "9093:9093"
        networks:
            - transcendence

    blackbox:
        image: prom/blackbox-exporter
        container_name: blackbox_exporter
        deploy:
            replicas: 1
        healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9115"]
            interval: 5s
            timeout: 1s
            retries: 10
            start_period: 5s
        volumes:
            - ./monitoring/blackbox:/config
        networks:
            - transcendence

    node_exporter:
        image: prom/node-exporter:v0.18.1
        container_name: node_exporter
        deploy:
            replicas: 1
        ports:
            - "9101:9100"
        healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
            interval: 5s
            timeout: 1s
            retries: 10
            start_period: 5s
        networks:
            - transcendence

volumes:
    prometheus-data:
    grafana-data:
    front-data:
        driver: local
        driver_opts:
            type: 'none'
            o: 'bind'
            device: './front/dist/transcendence/browser'
    db-data:

networks:
    transcendence:
        name: trancendence
